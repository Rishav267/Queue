


typedef struct {
    int front;
    int rear;
    int qsize;
    //int cur_size;
    int* array;
    
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

MyCircularQueue* myCircularQueueCreate(int k) {
    
    MyCircularQueue* queue=(MyCircularQueue*)malloc(sizeof(MyCircularQueue));
   queue->array =(int*)malloc(sizeof(int) * k);
   queue->qsize=k;
    queue->front=-1;
    queue->rear=-1;
    //queue->cur_size=0;
    return queue;
    
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    if((obj->front)==-1)
    {
        return true;
    }
    return false;
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
  if((obj->rear == (obj->qsize-1) && obj->front==0 )|| (obj->rear == obj->front-1))
  {
      return true;
  }
    return false;
}
/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    printf("%d\n",obj->rear);
    printf("%d",obj->front);
  if(myCircularQueueIsFull(obj))
  {
      return false;
  }
    else if(obj->rear==-1)
    {
        obj->rear=0;
        obj->front=0;
        obj->array[obj->rear]=value;
    }
    else if(obj->rear==obj->qsize-1)
    {
        obj->rear=0;
        obj->array[obj->rear]=value;
    }
    else
    {
        (obj->rear)++;
        obj->array[obj->rear]=value;
    }
    return true;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    printf("%d\n",obj->rear);
   if(myCircularQueueIsEmpty(obj))
   {
       return false;
   }
    else
    {
        int x= obj->array[obj->front];
        
        if(obj->front==obj->rear)
        {
            obj->front=obj->rear=-1;
        }
        else if(obj->front==obj->qsize-1)
            obj->front=0;
        else
            obj->front++;
        printf("%d\n",obj->front);
        return true;
    }
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
  if(myCircularQueueIsEmpty(obj))
  {
      return -1;
  }
  return obj->array[obj->front];
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
    printf("%d\n",obj->rear);
  if(myCircularQueueIsEmpty(obj))
      return -1;
return obj->array[obj->rear];
}


void myCircularQueueFree(MyCircularQueue* obj) {
    free (obj->array);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/
